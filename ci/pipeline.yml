meta:
  credhub-params: &credhub-params
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_SECRET: ((credhub.secret))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SERVER: ((credhub.server))

  bootstrap-params: &bootstrap-params
    BILLING_ACCOUNT_ID: ((billing_account_id))
    BUCKET_LOCATION: ((bucket_location))
    FOLDER_NAME: ((folder_name))
    GCP_CREDENTIALS_JSON: ((inception_gcp_credentials_json))
    ORGANIZATION_ID: ((organization_id))
    PROJECT_ID: ((gcp_project_id))
    PROJECT_NAME: ((project_name))

  prepare-tasks-with-secrets: &prepare-tasks-with-secrets
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
    input_mapping:
      tasks: platform-automation-tasks
      config: tas-srt-gcp-pipeline-repo
      vars: tas-srt-gcp-pipeline-repo
    params:
      CONFIG_PATHS: config/config
      VARS_PATHS: vars/vars
    output_mapping:
      tasks: platform-automation-tasks

  prepare-image: &prepare-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/prepare-image.yml
    params:
      CA_CERTS: ((opsman_ssl))

groups:
- name: deploy
  jobs:
  - set-pipeline
  - setup-project
  - pave-project
  - load-tfvars-into-credhub
  - apply-changes
  - install-*
  - configure-*
- name: fetch-dependencies
  jobs:
  - fetch-*
- name: teardown
  jobs:
  - set-pipeline
  - teardown-project
  - unpave-project

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

- name: pivnet
  type: registry-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: tas-srt-gcp-pipeline-repo
  type: git
  icon: github
  source:
    uri: git@github.com:EngineerBetter/tas-srt-gcp-pipeline.git
    private_key: ((git_private_key))
    branch: master
    ignore_paths:
    - README.md

- name: concourse-gcp-tf-bootstrap
  type: git
  icon: github
  source:
    uri: git@github.com:EngineerBetter/concourse-gcp-tf-bootstrap.git
    private_key: ((git_private_key))
    branch: master

- name: paving
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/paving.git
    private_key: ((git_private_key))
    branch: master

- name: project-tfstate
  type: gcs
  icon: google-cloud
  source:
    <<: &gcs-source
      bucket: ((gcp_project_id))
      json_key: ((inception_gcp_credentials_json))
    versioned_file: ci/terraform.tfstate

- name: platform-automation-tasks
  type: gcs
  source:
    <<: *gcs-source
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: gcs
  source:
    <<: *gcs-source
    regexp: platform-automation-image-(.*).tgz

# VM state and foundation tas-srt-gcp-pipeline-repo
- name: state
  type: gcs
  source:
    <<: *gcs-source
    versioned_file: state.yml
    initial_content_text: "{}"
    initial_version: "1"

- name: installation
  type: gcs
  source:
    <<: *gcs-source
    regexp: installation-(.*).zip

- name: project-account-and-bucket-terraform
  type: terraform
  icon: terraform
  source:
    env_name: ((env))-project
    backend_type: gcs
    backend_config:
      bucket: ((gcp_project_id))
      prefix: terraform/project-account-and-bucket
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_access_key))
      AWS_DEFAULT_REGION: ((aws_default_region))
      GOOGLE_CREDENTIALS: ((inception_gcp_credentials_json))
      GCE_SERVICE_ACCOUNT: ((inception_gcp_credentials_json))
    vars:
      project_id: ((gcp_project_id))
      env: ((env))
      zone_address: ((project_name)).engineerbetter.com

- name: paving-terraform
  type: terraform
  icon: terraform
  source:
    env_name: ((env))-project
    backend_type: gcs
    backend_config:
      bucket: ((gcp_project_id))
      prefix: terraform/paving
    env:
      GOOGLE_CREDENTIALS: ((gcp_credentials_json))

- name: pcf-ops-image
  type: registry-image
  icon: docker
  source:
    repository: engineerbetter/pcf-ops

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 5\.(.*)
    sort_by: semver

# Triggers
- name: one-time-trigger
  type: time
  source:
    interval: 999999h

# - name: daily-trigger
#   type: time
#   source:
#     interval: 24h

jobs:
- name: set-pipeline
  serial: true
  plan:
  - get: tas-srt-gcp-pipeline-repo
    trigger: true
  - set_pipeline: self
    file: tas-srt-gcp-pipeline-repo/ci/pipeline.yml
    var_files:
    - tas-srt-gcp-pipeline-repo/vars/((env)).yml

- name: setup-project
  serial: true
  plan:
  - in_parallel:
    - get: tas-srt-gcp-pipeline-repo
      trigger: true
      passed:
      - set-pipeline
    - get: concourse-gcp-tf-bootstrap
    - get: pcf-ops-image
  - task: bootstrap
    file: concourse-gcp-tf-bootstrap/tasks/bootstrap.yml
    params:
      <<: *bootstrap-params
      GCP_FLAKINESS_SLEEP: "60"
    ensure:
      put: project-tfstate
      params:
        file: tfstate-out/terraform.tfstate
  - put: project-account-and-bucket-terraform
    params:
      terraform_source: tas-srt-gcp-pipeline-repo/tf/project-account-and-bucket
  - load_var: project-creds
    file: project-account-and-bucket-terraform/metadata
    format: json
  - task: add-gcp-creds-to-credhub
    image: pcf-ops-image
    file: tas-srt-gcp-pipeline-repo/ci/tasks/add-value-to-credhub/task.yml
    input_mapping:
      repo: tas-srt-gcp-pipeline-repo
    params:
      NAME: /concourse/((concourse_team))/((concourse_pipeline))/gcp_credentials_json
      VALUE: ((.:project-creds.gcp_credentials_json))
      <<: *credhub-params

- name: pave-project
  serial: true
  plan:
  - in_parallel:
    - get: tas-srt-gcp-pipeline-repo
      trigger: true
      passed: [setup-project]
    - get: paving
    - get: project-account-and-bucket-terraform
      passed: [setup-project]
    - get: pcf-ops-image
  - in_parallel:
    - load_var: project-creds
      file: project-account-and-bucket-terraform/metadata
      format: json
    - task: nuke-pks
      image: pcf-ops-image
      config:
        platform: linux
        inputs: [name: paving]
        outputs: [name: paving]
        run:
          path: bash
          args:
          - -euc
          - |
            rm -f paving/gcp/pks-*
  - put: paving-terraform
    params:
      terraform_source: paving/gcp
      vars:
        <<: &paving-vars
          project: ((gcp_project_id))
          environment_name: ((env))
          region: europe-west2
          availability_zones: ((.:project-creds.available_zones))
          hosted_zone: ((.:project-creds.zone_name))
          ssl_certificate: ((.:project-creds.ssl_cert))
          ssl_private_key: ((.:project-creds.ssl_key))
          service_account_key: ((.:project-creds.gcp_credentials_json))

- name: load-tfvars-into-credhub
  serial: true
  plan:
  - in_parallel:
    - get: tas-srt-gcp-pipeline-repo
      trigger: true
      passed: [pave-project]
    - get: project-account-and-bucket-terraform
    - get: paving-terraform
    - get: pcf-ops-image
  - task: load-tfvars-into-credhub
    image: pcf-ops-image
    file: tas-srt-gcp-pipeline-repo/ci/tasks/load-tfvars-into-credhub/task.yml
    params:
      ENV: ((env))
      <<: *credhub-params

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: tas-srt-gcp-pipeline-repo
      trigger: true
      passed: [load-tfvars-into-credhub]
    - get: state
    - get: project-account-and-bucket-terraform
    - get: paving
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - load_var: project-account-and-bucket-terraform
    file: project-account-and-bucket-terraform/metadata
    format: json
  - load_var: paving-terraform
    file: paving/metadata
    format: json
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: tas-srt-gcp-pipeline-repo
      vars: tas-srt-gcp-pipeline-repo
    params:
      CONFIG_FILE: config/download-opsman.yml
    output_mapping:
      downloaded-product: opsman-image
  - task: write-gcp-creds-to-file
    file: tas-srt-gcp-pipeline-repo/ci/tasks/write-gcp-creds-to-file/task.yml
    params:
      GCP_CREDENTIALS_JSON: ((gcp_credentials_json))
  - task: create-vm-custom
    image: platform-automation-image
    file: tas-srt-gcp-pipeline-repo/ci/tasks/create-vm/task.yml
    input_mapping:
      image: opsman-image
      config: tas-srt-gcp-pipeline-repo
      vars: tas-srt-gcp-pipeline-repo
    params:
      OPSMAN_CONFIG_FILE: config/opsman.yml
      STATE_FILE: state.yml
      VARS_FILES: vars/vars/((env)).yml
    ensure: &put-state
      do:
      - put: state
        params:
          file: generated-state/state.yml
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: tas-srt-gcp-pipeline-repo
      config: tas-srt-gcp-pipeline-repo
    params:
      ENV_FILE: config/env.yml
      AUTH_CONFIG_FILE: config/auth.yml
      OM_VARS_ENV: OM_VAR
      OM_VAR_opsman_password: ((.:project-account-and-bucket-terraform.opsman_password))
      OM_VAR_project: ((.:paving-terraform.project))
      OM_VAR_region: ((.:paving-terraform.stable_config_opsmanager.region))
      OM_VAR_zone: ((.:paving-terraform.stable_config_opsmanager.region))-b
      OM_VAR_management_subnet_name: ((.:paving-terraform.stable_config_opsmanager.management_subnet_name))
      OM_VAR_ops_manager_public_ip: ((.:paving-terraform.stable_config_opsmanager.ops_manager_public_ip))
      OM_VAR_ops_manager_ssh_public_key: ((.:paving-terraform.stable_config_opsmanager.ops_manager_ssh_public_key))
      OM_VAR_ops_manager_tags: ((.:paving-terraform.stable_config_opsmanager.ops_manager_tags))
  - task: configure-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-opsman.yml
    input_mapping:
      env: tas-srt-gcp-pipeline-repo
      config: tas-srt-gcp-pipeline-repo
      vars: tas-srt-gcp-pipeline-repo
    params:
      ENV_FILE: config/env.yml
      OPSMAN_CONFIG_FILE: config/opsman.yml
      VARS_FILES: vars/vars/((env)).yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: tas-srt-gcp-pipeline-repo
      env: tas-srt-gcp-pipeline-repo
      vars: tas-srt-gcp-pipeline-repo
    params:
      ENV_FILE: config/env.yml
      DIRECTOR_CONFIG_FILE: config/director.yml
      VARS_FILES: |
        vars/vars/((env)).yml
      OM_VARS_ENV: OM_VAR
      OM_VAR_ssl_issuer: ((.:project-account-and-bucket-terraform.ssl_issuer))
  - task: apply-director-changes-custom
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: tas-srt-gcp-pipeline-repo
    params:
      ENV_FILE: config/env.yml
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: tas-srt-gcp-pipeline-repo
    params:
      INSTALLATION_FILE: installation-$timestamp.zip
      ENV_FILE: config/env.yml
  - put: installation
    params:
      file: installation/installation*.zip

- name: configure-tas
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: tas-srt-gcp-pipeline-repo
      trigger: true
      passed: [install-opsman]
    - get: state
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - in_parallel:
    - do:
      - task: download-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        input_mapping:
          config: tas-srt-gcp-pipeline-repo
        params:
          CONFIG_FILE: config/download-tas-stemcell.yml
          SOURCE: pivnet
        output_mapping:
          downloaded-product: tas-stemcell
      - task: upload-tas-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: tas-srt-gcp-pipeline-repo
          stemcell: tas-stemcell
        params:
          ENV_FILE: config/env.yml
    - do:
      - task: download-tas
        image: platform-automation-image
        file: platform-automation-tasks/tasks/download-product.yml
        input_mapping:
          config: tas-srt-gcp-pipeline-repo
        params:
          CONFIG_FILE: config/download-tas.yml
          SOURCE: pivnet
        output_mapping:
          downloaded-product: tas-product
      - task: upload-tas-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: tas-product
          env: tas-srt-gcp-pipeline-repo
        params:
          ENV_FILE: config/env.yml
      - task: stage-tas
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: tas-product
          env: tas-srt-gcp-pipeline-repo
        params:
          ENV_FILE: config/env.yml

- name: apply-changes
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: tas-srt-gcp-pipeline-repo
      trigger: true
      passed: [configure-tas]
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - task: om-apply-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: tas-srt-gcp-pipeline-repo
    params:
      ENV_FILE: config/env.yml

- name: teardown-project
  serial: true
  plan:
  - in_parallel:
    - get: tas-srt-gcp-pipeline-repo
      passed:
      - set-pipeline
    - get: concourse-gcp-tf-bootstrap
    - get: project-tfstate
  - task: teardown
    file: concourse-gcp-tf-bootstrap/tasks/teardown.yml
    input_mapping:
      tfstate: project-tfstate
    params:
      <<: *bootstrap-params

- name: unpave-project
  serial: true
  plan:
  - in_parallel:
    - get: tas-srt-gcp-pipeline-repo
      passed:
      - set-pipeline
    - get: paving
    - get: project-account-and-bucket-terraform
    - get: pcf-ops-image
  - in_parallel:
    - load_var: project-creds
      file: project-account-and-bucket-terraform/metadata
      format: json
    - task: nuke-pks
      image: pcf-ops-image
      config:
        platform: linux
        inputs: [name: paving]
        outputs: [name: paving]
        run:
          path: bash
          args:
          - -euc
          - |
            rm -f paving/gcp/pks-*
  - put: paving-terraform
    params:
      terraform_source: paving/gcp
      action: destroy
      get_params: {action: destroy}
      vars:
        <<: *paving-vars

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
